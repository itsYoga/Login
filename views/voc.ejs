<!DOCTYPE html>
 
<html>
<head>
    <title>單字區</title>
    
    <script src="src\jquery3.6.1.js">
    </script>
    <style>
        :root {
            --grey-color: rgb(228, 228, 228);
            --darker-grey-color: rgb(189, 189, 189);
            --text-color: rgb(60, 60, 60);
            --border-radius: 15px;
        }
        body{
          background-image: url('https://img.freepik.com/free-photo/watercolor-light-steel-blue-wallpaper-image_53876-94665.jpg?size=626&ext=jpg&ga=GA1.1.1546980028.1703289600&semt=ais');
          background-size: 100%;
          overflow: hidden;
          font-family: "-apple-system", BlinkMacSystemFont, "Yu Gothic Medium", "游ゴシック Medium", YuGothic, "游ゴシック体", "Noto Sans Japanese", "ヒラギノ角ゴ Pro W3", "メイリオ", "Hiragino Kaku Gothic ProN", "MS PGothic", Osaka, "sans-serif";
        }
        body,input { font-size: 9pt; }
        .container{
            position: absolute;
            top: 10%;
            left: 20%;
            display: flex;
            flex-wrap: nowrap;
        }
        .sentence {
          width: 55em;
          margin-top: 6em;
          margin-left: 16em; 
        }
       
        .option
        {
            float: left; width: 20px; height: 20px; border: 2px solid #cccccc;
            margin-right: 4px; margin-bottom: 4px;
        }
        .active { border: 2px solid black; }
        .lw { text-align: center; vertical-align: middle; }
        img.output { border: 1px solid green; }
        #cSketchPad { cursor: arrow; }
        .voiceoption {
        position: fixed;
        top: 0;
        right: 0;
        }

        .optionselect {
        display: none; 
        position: absolute;
        top: 80px;
        right: 0;
        }

        .voiceoption:hover .optionselect {
            display: block; 
        }
        .top {
          display: inline-block; 
          vertical-align: top; 
          margin-bottom: 0;
        }
        .top,#transtitle,#transtitle1{
          font-size: 240%;
        }
        #back{
            position: absolute;
            left: 0;
            top:50%;
            width: 80px;
            height: 80px;
            transform: scaleX(-1);
        }
        #next{
            position: absolute;
            right: 0;
            top:50%;
            width: 80px;
            height: 80px;
        }
        #next:active{
            transform: translateY(2px);
        }
        #back:active{
            transform: translateY(2px) scaleX(-1);
            
        }
        #soundv,#sounds{
          width: 30px;
          height: 30px;
          margin-left: 5px;
          
        }
        #soundv:active,#sounds:active,#backImage:active{
          transform: translateY(2px);
        }
        footer {
            position: fixed;
            bottom: 0;
            
            width: 100%;
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 2em 5em;
        }

        .skip_button,
        .check_button{
            font-size: 1em;
            font-weight: 600;
            padding: 0.8em 2.5em;
            border-radius: var(--border-radius);
            transition: 0s all ease-in-out;
            cursor: pointer;
        }
        .clearbutton{
            width: 50px;
            font-size: 1.8em;
            text-indent: -12px;
            font-weight: 600;
            padding: 0.8em 1.5em;
            border-radius: var(--border-radius);
            transition: 0s all ease-in-out;
            cursor: pointer;
            margin-bottom: 1em;
        }
        .button {
            width: 65px;
            display: inline-block;
            vertical-align: top;
            font-size: 1.3em;
            font-weight: 400;
            padding: 0.6em 0.6em;
            border-radius: var(--border-radius);
            transition: 0s all ease-in-out;
            cursor: pointer;
            
        }

        .skip_button ,.clearbutton{
            color: white;
            border: 1px solid var(--grey-color);
            background-color: rgb(157, 156, 156);
            box-shadow: 0px 3px 0px 0px var(--grey-color);
        }

        .skip_button:hover ,.clearbutton:hover{
            background-color: rgba(143, 157, 173, 0.2);
        }

        .check_button,.button {
            color: white;
            border: 1px solid #2e99c7;
            background-color: #2e99c7;
            box-shadow: 0px 3px 0px 0px #2792aa;
        }

        .check_button:hover,.button:hover {
            background-color: #33cadb;
        }

        .skip_button:active,
        .check_button:active,
        .button:active ,.clearbutton:active{
            transform: translateY(2px);
            box-shadow: none;
        }
    </style>
    <script>
      const gojuonHiragana = [
        "あ", "い", "う", "え", "お",
        "か", "き", "く", "け", "こ",
        "さ", "し", "す", "せ", "そ",
        "た", "ち", "つ", "て", "と",
        "な", "に", "ぬ", "ね", "の",
        "は", "ひ", "ふ", "へ", "ほ",
        "ま", "み", "む", "め", "も",
        "や", "ゆ", "よ", 
        "ら", "り", "る", "れ", "ろ",
        "わ", "を", "ん"
        ];
        const urlParams = new URLSearchParams(window.location.search);
        const key = urlParams.get('key'); 
        if (key) {
    
    
    fetch('vocabulary.json')
        .then(response => response.json())
        .then(data => {
            document.getElementById('name').textContent = key+'ー';
           
            const imageUrl = data[key] ? data[key].img : '';
                const vocabularyWord = data[key] ? data[key].vocabulary : '';
                const vocabularysentence = data[key] ? data[key].sentence : '';
                
                document.getElementById('backImage').src = imageUrl;

                const imgVoc = document.getElementById('transv');
                const h1VocValue = document.createElement('h1');
                h1VocValue.id = 'vocvalue';
                imgVoc.parentNode.insertBefore(h1VocValue, imgVoc.nextSibling);
                h1VocValue.innerHTML = vocabularyWord;

                const imgSen = document.getElementById('transs');
                const h1SenValue = document.createElement('h1');
                h1SenValue.id = 'senvalue';
                imgSen.parentNode.insertBefore(h1SenValue, imgSen.nextSibling);
                h1SenValue.innerHTML = vocabularysentence;
                
            
        })
        .catch(error => console.error('Error fetching JSON:', error));
    } else {
    console.error('Key parameter is missing.');
    }
        $(function () {
            
    $(".skip_button").click(function () {
    window.location.href = "vocmenu"; 
    });
    $(".check_button").click(function () {
    window.location.href = "paint.ejs?key="+key; 
    });
    $("#next").click(function () {
    const keyIndex = gojuonHiragana.indexOf(key);
    const nextIndex = (keyIndex + 1) % gojuonHiragana.length;
    const nextKey = gojuonHiragana[nextIndex];
    window.location.href = "voc.ejs?key=" + nextKey;
    });
    $("#back").click(function () {
        const keyIndex = gojuonHiragana.indexOf(key);
        const prevIndex = (keyIndex - 1 + gojuonHiragana.length) % gojuonHiragana.length;
        const prevKey = gojuonHiragana[prevIndex];
        window.location.href = "voc.ejs?key=" + prevKey;
    });
    var transv = 0;
    $("#transv").click(function () {
      if(transv == 0){
       $.ajax({
        url: "vocabulary.json",  
        dataType: "json",
        success: function(data) {
            var voctranslation = data[key].voctrans;
            const imgSen = document.getElementById('vocvalue');
                const h1SenValue = document.createElement('h1');
                h1SenValue.id = 'transtitle';
                imgSen.parentNode.insertBefore(h1SenValue, imgSen.nextSibling);
                h1SenValue.innerHTML = "中文翻譯:";
                const h1Value = document.createElement('h1');
                h1Value.id = 'voctrans';
                h1SenValue.parentNode.insertBefore(h1Value, h1SenValue.nextSibling);
                h1Value.innerHTML = voctranslation;
                transv=1;
        },
        error: function(jqXHR, textStatus, errorThrown) {
            console.error("Error fetching JSON: " + textStatus, errorThrown);
        }
    }); 
      }else{
        const imgSen = document.getElementById('transtitle').remove();
        const imgSen1 = document.getElementById('voctrans').remove();
        transv=0;
      }
      
  });
  var transs = 0;
  $("#transs").click(function () {
      if(transs == 0){
       $.ajax({
        url: "vocabulary.json",  
        dataType: "json",
        success: function(data) {
            var voctranslation = data[key].sentrans;
            const imgSen = document.getElementById('senvalue');
                const h1SenValue = document.createElement('h1');
                h1SenValue.id = 'transtitle1';
                imgSen.parentNode.insertBefore(h1SenValue, imgSen.nextSibling);
                h1SenValue.innerHTML = "中文翻譯:";
                const h1Value = document.createElement('h1');
                h1Value.id = 'sentrans';
                h1SenValue.parentNode.insertBefore(h1Value, h1SenValue.nextSibling);
                h1Value.innerHTML = voctranslation;
                transs=1;
        },
        error: function(jqXHR, textStatus, errorThrown) {
            console.error("Error fetching JSON: " + textStatus, errorThrown);
        }
    }); 
      }else{
        const imgSen = document.getElementById('transtitle1').remove();
        const imgSen1 = document.getElementById('sentrans').remove();
        transs=0;
      }
      
  });
});


</script>
</head>
<body>
<h1 style="display: none;" id="name"></h1>
<div class="container">
<div>
<img src="" id="backImage" width="400" height="400" style=" border: 10px solid #2792aa; border-radius: var(--border-radius);">
</div>
<div class="sentence">
  <h1 id="voc" class="top">単語:</h1><img src='https://cdn4.iconfinder.com/data/icons/web-ui-color/128/Audio-512.png' id='soundv'> <div class="button" id="transv">中文翻譯</div>
  <h1 id="sen" class="top">例文:</h1><img src='https://cdn4.iconfinder.com/data/icons/web-ui-color/128/Audio-512.png' id='sounds'> <div class="button" id="transs">中文翻譯</div>
</div>
</div>
<div class="voiceoption">
    <img src="https://static.thenounproject.com/png/2916776-200.png" width="80px" height="80px" style="position: absolute; top: 0; right: 0%;">
    <div class="optionselect">
        <select></select>
          <div>
            <label for="rate">Rate</label
            ><input type="range" min="0.5" max="2" value="1" step="0.1" id="rate" />
            <div class="rate-value">1</div>
            <div class="clearfix"></div>
          </div>
          <div>
            <label for="pitch">Pitch</label
            ><input type="range" min="0" max="2" value="1" step="0.1" id="pitch" />
            <div class="pitch-value">1</div>
            <div class="clearfix"></div>
          </div>
           
    </div>
    
</div>
<img id="next" src="https://cdn-icons-png.flaticon.com/512/189/189253.png">
<img id="back" src="https://cdn-icons-png.flaticon.com/512/189/189253.png">
<footer>
    <div class="skip_button">MENU</div>
    <div class="check_button">寫字</div>
</footer>
<script>
    const synth = window.speechSynthesis;

const inputForm = document.querySelector("form");
const inputTxt = document.querySelector(".txt");
const voiceSelect = document.querySelector("select");

const pitch = document.querySelector("#pitch");
const pitchValue = document.querySelector(".pitch-value");
const rate = document.querySelector("#rate");
const rateValue = document.querySelector(".rate-value");

let voices = [];

function populateVoiceList() {
  voices = synth.getVoices().filter(function (voice) {
    // Adjust the condition to match the language code for Japanese
    return voice.lang.startsWith('ja');
  }).sort(function (a, b) {
    const aname = a.name.toUpperCase();
    const bname = b.name.toUpperCase();

    if (aname < bname) {
      return -1;
    } else if (aname == bname) {
      return 0;
    } else {
      return +1;
    }
  });

  const selectedIndex = voiceSelect.selectedIndex < 0 ? 0 : voiceSelect.selectedIndex;
  voiceSelect.innerHTML = "";

  for (let i = 0; i < voices.length; i++) {
    const option = document.createElement("option");
    option.textContent = `${voices[i].name} (${voices[i].lang})`;

    if (voices[i].default) {
      option.textContent += " -- DEFAULT";
    }

    option.setAttribute("data-lang", voices[i].lang);
    option.setAttribute("data-name", voices[i].name);
    voiceSelect.appendChild(option);
  }
  voiceSelect.selectedIndex = selectedIndex;
}

populateVoiceList();


if (speechSynthesis.onvoiceschanged !== undefined) {
  speechSynthesis.onvoiceschanged = populateVoiceList;
}

function speak(n) {
  if (synth.speaking) {
    console.error("speechSynthesis.speaking");
    return;
  }

  if (n !== "") {
    const utterThis = new SpeechSynthesisUtterance(n);

    utterThis.onend = function (event) {
      console.log("SpeechSynthesisUtterance.onend");
    };

    utterThis.onerror = function (event) {
      console.error("SpeechSynthesisUtterance.onerror");
    };

    const selectedOption =
      voiceSelect.selectedOptions[0].getAttribute("data-name");

    for (let i = 0; i < voices.length; i++) {
      if (voices[i].name === selectedOption) {
        utterThis.voice = voices[i];
        break;
      }
    }
    utterThis.pitch = pitch.value;
    utterThis.rate = rate.value;
    synth.speak(utterThis);
  }
}

document.getElementById('backImage').onclick = function (event) {
  event.preventDefault();
let n =document.getElementById('name');
if (n) {
     let textContent = n.textContent || n.innerText;
    speak(textContent);   
    } 
};
document.getElementById('soundv').onclick = function (event) {
  console.log("in");
  event.preventDefault();
let n =document.getElementById('vocvalue');
console.log(n);
if (n) {
     let textContent = n.textContent || n.innerText;
     console.log(textContent);
    speak(textContent);   
    } else{
      console.log("no");
    }
};
document.getElementById('sounds').onclick = function (event) {
  event.preventDefault();
let n =document.getElementById('senvalue');
if (n) {
     let textContent = n.textContent || n.innerText;
    speak(textContent);   
    } 
};

pitch.onchange = function () {
  pitchValue.textContent = pitch.value;
};

rate.onchange = function () {
  rateValue.textContent = rate.value;
};

voiceSelect.onchange = function () {
  speak();
};
</script>
</body>
</html>
